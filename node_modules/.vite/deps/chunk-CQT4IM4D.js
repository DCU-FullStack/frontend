import {
  useLayoutEffect2
<<<<<<<< HEAD:node_modules/.vite/deps/chunk-L7LUM6I4.js
} from "./chunk-MAGZZGKE.js";
========
} from "./chunk-KBOIXJPK.js";
>>>>>>>> 55954c57 (feat: CCTV화면에 AI(YOLOv8)적용 후 incidents페이지에 띄우고 task로 할당하는 기능 추가):node_modules/.vite/deps/chunk-CQT4IM4D.js
import {
  require_react
} from "./chunk-3CUDRKN3.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@radix-ui/react-use-size/dist/index.mjs
var React = __toESM(require_react(), 1);
function useSize(element) {
  const [size, setSize] = React.useState(void 0);
  useLayoutEffect2(() => {
    if (element) {
      setSize({ width: element.offsetWidth, height: element.offsetHeight });
      const resizeObserver = new ResizeObserver((entries) => {
        if (!Array.isArray(entries)) {
          return;
        }
        if (!entries.length) {
          return;
        }
        const entry = entries[0];
        let width;
        let height;
        if ("borderBoxSize" in entry) {
          const borderSizeEntry = entry["borderBoxSize"];
          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
          width = borderSize["inlineSize"];
          height = borderSize["blockSize"];
        } else {
          width = element.offsetWidth;
          height = element.offsetHeight;
        }
        setSize({ width, height });
      });
      resizeObserver.observe(element, { box: "border-box" });
      return () => resizeObserver.unobserve(element);
    } else {
      setSize(void 0);
    }
  }, [element]);
  return size;
}

export {
  useSize
};
<<<<<<<< HEAD:node_modules/.vite/deps/chunk-L7LUM6I4.js
//# sourceMappingURL=chunk-L7LUM6I4.js.map
========
//# sourceMappingURL=chunk-CQT4IM4D.js.map
>>>>>>>> 55954c57 (feat: CCTV화면에 AI(YOLOv8)적용 후 incidents페이지에 띄우고 task로 할당하는 기능 추가):node_modules/.vite/deps/chunk-CQT4IM4D.js
